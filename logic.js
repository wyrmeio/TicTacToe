/**
 * Created by idris on 6/2/15.
 */
/*
 * this block is shared between client and server
 */
var currentPlayer, gameSummary, getWinner;

Cells = new Meteor.Collection('cells');
Players = new Meteor.Collection('players');

gameSummary = function() {
    var cell, combo, key, pickedCells, pickedWinningCombo, val, winners, winningCombos, _i, _j, _len, _len1, _name, _ref;
    winningCombos = [
        ['0', '1', '2'],
        ['3', '4', '5'],
        ['6', '7', '8'],
        ['0', '3', '6'],
        ['1', '4', '7'],
        ['2', '5', '8'],
        ['0', '4', '8'],
        ['2', '4', '6']
    ];
    pickedCells = {};
    _ref = Cells.find().fetch();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        if (cell.type != null) {
            if (pickedCells[_name = cell.type] == null) {
                pickedCells[_name] = [];
            }
            pickedCells[cell.type].push(cell._id);
        }
    }
    winners = {};
    for (key in pickedCells) {
        val = pickedCells[key];
        for (_j = 0, _len1 = winningCombos.length; _j < _len1; _j++) {
            combo = winningCombos[_j];
            pickedWinningCombo = _.all(combo, function(comboItem) {
                return _.contains(pickedCells[key], comboItem);
            });
            if (pickedWinningCombo) {
                winners[key] = true;
                winners.winningCells = combo;
            }
        }
    }
    return winners;
};


/*
 * client only block -- should be in a 'client' folder
 */

if (Meteor.isClient) {
    currentPlayer = function() {
        if ((Cells.find({type: {$exists: true  } }, { sort: {_id: 1} }).count() % 2) === 0) {
            return 'X';
        } else {
            return 'O';
        }
    };
    getWinner = function() {
        var key, val, _ref;
        _ref = gameSummary();
        for (key in _ref) {
            val = _ref[key];
            if (val === true) {
                return key;
            }
        }
        return false;
    };




    Template.board.helpers({
        currentPlayer: function() {
            return currentPlayer();
        },
        winner: function() {
            return getWinner();
        },
        cells: function() {
            return Cells.find({}, { sort: { _id: 1 } });
        },
        buttonType: function() {
            if (this.winning) {
                return 'btn-success';
            } else if (this.type != null) {
                return 'btn-primary';
            } else {
                return 'btn-default';
            }
        }
    });
    Template.board.events({
        'click .restart-game': function() {
            return Meteor.call('restartGame');
        },
        'click .cell': function() {
            var _ref;
            if (!((((_ref = Cells.findOne({_id: this._id })) != null ? _ref.type : void 0) != null) || getWinner()))
            {
                Cells.update({_id: this._id}, {$set: {type: currentPlayer()}});
                if (gameSummary().winningCells != null) {
                    return Meteor.call('updateWinningCells');
                }
            }
        }
    });
}


/*
 * server only block -- should be in a a 'server' folder
 */

if (Meteor.isServer) {
    Meteor.methods({
        'restartGame': function()
        {
            return Cells.update({}, {$unset: {  type: true, winning: true }}, { multi: true });
        },
        'updateWinningCells': function() {
            if (gameSummary().winningCells != null)
            {
                return Cells.update({ _id: {$in: gameSummary().winningCells }}, { $set: { winning: true } }, { multi: true});
            }
        }
    });
    Meteor.startup(function() {
        var i;

;        if (Cells.find().count() === 0)
        {
            for (i  = 0; i <= 8; i = ++i) {
                Cells.insert({ _id: "" + i});
            }
          //  return _results;
        }
    });
}

// ---
// generated by coffee-script 1.9.0